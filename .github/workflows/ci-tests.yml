name: CI Testing

on:
  push:
    branches:
      - master
      - users/carson/migrate_to_gha # TODO remove after done dev
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      custom_marist_host:
        description: ZOSMF host
        type: string
        required: false
      custom_zosmf_port:
        description: ZOSMF port
        type: string
        required: false

env:
  # TODO need a way to switch the marist credentials - use a GHA environment to hold host/ports and credentials?
  MARIST_HOST: ${{ github.event.inputs.custom_marist_host || 'zzow04.zowe.marist.cloud' }}
  ZOSMF_PORT: ${{ github.event.inputs.custom_zosmf_port || 10443 }}
  GATEWAY_HOST: gateway-service
  GATEWAY_PORT: 7554
  JOBS_PORT: 8443

jobs:
  UnitTest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup

      - name: Build with Gradle
        run: ./gradlew build

      - name: Unit test with Gradle
        run: ./gradlew coverage

      - name: Store test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: UnitTestResults
          path: |
            build/reports/jacoco/jacocoFullReport/html
            jobs-api-server/build/reports/tests/test

      - uses: ./.github/actions/teardown

  IntegrationTest:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup

      # TODO need a lock on marist?

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run APIML containers
        run: |
          chmod +x scripts/create-containerized-apiml.sh
          ./scripts/create-containerized-apiml.sh
          sleep 1m # Let containers set up
        env:
          ZOSMF_HOST: ${{ env.MARIST_HOST }}
          ZOSMF_PORT: ${{ env.ZOSMF_PORT }}
          GATEWAY_PORT: ${{ env.GATEWAY_PORT }}
          JOBS_PORT: ${{ env.JOBS_PORT }}

      - name: Run Jobs API server
        run: >
          java -Xms16m -Xmx512m -Dibm.serversocket.recover=true -Dfile.encoding=UTF-8
          -Djava.io.tmpdir=/tmp
          -Dserver.port=${{ env.JOBS_PORT }}
          -Dserver.ssl.keyAlias=localhost
          -Dserver.ssl.keyStore=localhost.keystore.p12
          -Dserver.ssl.keyStorePassword=password
          -Dserver.ssl.keyStoreType=PKCS12
          -Dconnection.httpsPort=${{ env.GATEWAY_PORT }}
          -Dconnection.ipAddress=${{ env.GATEWAY_HOST }}
          -jar jobs-api-server/build/libs/jobs-api-server-*-boot.jar

      - name: Integration tests for v1 - LTPA
        run: >
          ./gradlew runIntegrationTests --info
          -Pserver.host=${{ env.GATEWAY_HOST }}
          -Pserver.port=${{ env.GATEWAY_PORT }}
          -Pserver.username=${{ secrets.SSH_MARIST_USERNAMEP }}
          -Pserver.password=${{ secrets.SSH_MARIST_PASSWORDP }}
          -Ptest.version=1

      - name: Integration tests for v2 - JWT
        run: >
          ./gradlew runIntegrationTests --info
          -Pserver.host=${{ env.GATEWAY_HOST }}
          -Pserver.port=${{ env.GATEWAY_PORT }}
          -Pserver.username=${{ secrets.SSH_MARIST_USERNAMEP }}
          -Pserver.password=${{ secrets.SSH_MARIST_PASSWORDP }}
          -Ptest.version=2

      - name: Output APIML logs
        if: always()
        run: docker-compose -f .apiml/docker-compose.yml logs

      - name: Store test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: IntegrationTestResults
          path: |
            jobs-tests/build/reports/tests/test-1
            jobs-tests/build/reports/tests/test-2

      - uses: ./.github/actions/teardown

  SonarQubeScan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup
        with:
          jdkVersion: 11

      - name: Sonar scan with Gradle
        run: >
          ./gradlew build coverage sonarqube
          -Psonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
          -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - uses: ./.github/actions/teardown
